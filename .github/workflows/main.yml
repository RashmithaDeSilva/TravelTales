name: Docker CI Pipeline

on:
  push:
    branches:
      - user_api

jobs:
  Country_Finder_Service_API_Container_Build_Test_Push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker image
        run: |
          cd backend/country_finder_service_api
          docker build -t ${{ secrets.DOCKER_USERNAME }}/traveltales/country_finder_service_api:${{ secrets.COUNTRY_FINDER_SERVICE_API_VERSION }} .

      - name: Tag Docker image with latest
        run: |
          docker tag ${{ secrets.DOCKER_USERNAME }}/traveltales/country_finder_service_api:${{ secrets.COUNTRY_FINDER_SERVICE_API_VERSION }} \
                     ${{ secrets.DOCKER_USERNAME }}/traveltales/country_finder_service_api:latest

      - name: Run Docker container
        run: |
          docker run -d -p 5000:5000 --name temp_container ${{ secrets.DOCKER_USERNAME }}/traveltales/country_finder_service_api:latest
          echo "Waiting for API to be ready..."
          for i in {1..30}; do
            if curl -s http://localhost:5000/status > /dev/null; then
              echo "API is up!"
              break
            fi
            echo "Waiting ($i)..."
            sleep 1
          done

      - name: Run test script
        run: |
          cd backend/country_finder_service_api
          python test.py

      - name: Stop and remove container
        run: |
          docker stop temp_container
          docker rm temp_container

      - name: Upload test results
        uses: actions/upload-artifact@v4
        with:
          name: country_finder_service_api_results
          path: backend/country_finder_service_api/results.txt

      # - name: Push Docker image to Docker Hub
      #   run: |
      #     docker push ${{ secrets.DOCKER_USERNAME }}/traveltales/country_finder_service_api:${{ secrets.COUNTRY_FINDER_SERVICE_API_VERSION }}
      #     docker push ${{ secrets.DOCKER_USERNAME }}/traveltales/country_finder_service_api:latest

  Toxicity_Detection_Service_API_Container_Build_Test_Push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker image
        run: |
          cd backend/toxicity_detection_service_api
          docker build -t ${{ secrets.DOCKER_USERNAME }}/traveltales/toxicity_detection_service_api:${{ secrets.TOXICITY_DETECTION_SERVICE_API_VERSION }} .

      - name: Tag Docker image with latest
        run: |
          docker tag ${{ secrets.DOCKER_USERNAME }}/traveltales/toxicity_detection_service_api:${{ secrets.TOXICITY_DETECTION_SERVICE_API_VERSION }} \
                     ${{ secrets.DOCKER_USERNAME }}/traveltales/toxicity_detection_service_api:latest

      - name: Run Docker container
        run: |
          docker run -d -p 5001:5001 --name temp_container ${{ secrets.DOCKER_USERNAME }}/traveltales/toxicity_detection_service_api:latest
          echo "Waiting for API to be ready..."
          for i in {1..30}; do
            if curl -s http://localhost:5001/status > /dev/null; then
              echo "API is up!"
              break
            fi
            echo "Waiting ($i)..."
            sleep 1
          done

      - name: Run test script
        run: |
          cd backend/toxicity_detection_service_api
          python test.py

      - name: Stop and remove container
        run: |
          docker stop temp_container
          docker rm temp_container

      - name: Upload test results
        uses: actions/upload-artifact@v4
        with:
          name: toxicity_detection_service_api_results
          path: backend/toxicity_detection_service_api/results.txt

      # - name: Push Docker image to Docker Hub
      #   run: |
      #     docker push ${{ secrets.DOCKER_USERNAME }}/traveltales/toxicity_detection_service_api:${{ secrets.TOXICITY_DETECTION_SERVICE_API_VERSION }}
      #     docker push ${{ secrets.DOCKER_USERNAME }}/traveltales/toxicity_detection_service_api:latest

  User_Service_API_Container_Build_Test_Push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker image
        run: |
          cd backend/user_service_api
          docker build -t ${{ secrets.DOCKER_USERNAME }}/traveltales/user_service_api:${{ secrets.USER_SERVICE_API_VERSION }} .

      - name: Tag Docker image with latest
        run: |
          docker tag ${{ secrets.DOCKER_USERNAME }}/traveltales/user_service_api:${{ secrets.USER_SERVICE_API_VERSION }} \
                     ${{ secrets.DOCKER_USERNAME }}/traveltales/user_service_api:latest

      - name: Create Docker network
        run: |
          docker network create \
            --subnet=172.18.0.0/16 \
            traveltales_net

      - name: Start MySQL
        run: |
          docker run -d \
            --name mysql \
            --network traveltales_net \
            --ip 172.18.0.10 \
            -e MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }} \
            mysql:latest
      
      - name: Start Redis
        run: |
          docker run -d \
            --name redis \
            --network traveltales_net \
            --ip 172.18.0.11 \
            redis:7.4-alpine3.21

      - name: Recreate .env
        run: |
          cd backend/user_service_api
          cat <<EOF > .env
          MYSQL_DB_HOST=172.18.0.10
          REDIS_HOST=172.18.0.11
          EOF
          

      - name: Start User Service API
        run: |
          cd backend/user_service_api
          docker run -d \
            --name user_service_api \
            --network traveltales_net \
            --env-file .env \
            -p 3002:3002 \
            ${{ secrets.DOCKER_USERNAME }}/traveltales/user_service_api:latest

      - name: Wait for API to come up
        run: |
          for i in {1..30}; do
            if curl -s http://localhost:3002/api/${{ secrets.USER_SERVICE_API_VERSION }}/status > /dev/null; then
              echo "API is up!"
              exit 0
            fi
            echo "waiting ($i/30)â€¦"
            sleep 1
          done
          echo "API never became ready" >&2
          exit 1

      # - name: Run test script
      #   run: |
      #     cd backend/user_service_api

      - name: Stop and remove container
        run: |
          docker stop temp_container
          docker rm temp_container

      # - name: Upload test results
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: user_service_api_results
      #     path: backend/user_service_api/results.txt

      # - name: Push Docker image to Docker Hub
      #   run: |
      #     docker push ${{ secrets.DOCKER_USERNAME }}/traveltales/user_service_api:${{ secrets.USER_SERVICE_API_VERSION }}
      #     docker push ${{ secrets.DOCKER_USERNAME }}/traveltales/user_service_api:latest